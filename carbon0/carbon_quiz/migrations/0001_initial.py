# Generated by Django 3.1.1 on 2020-10-04 05:09

import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.CharField(help_text='Question for the user', max_length=500)),
                ('question_info', models.TextField(help_text='Explains any vocabulary relevant to the question.')),
                ('carbon_value', models.FloatField(help_text="Tons of carbon that may be present in user's footprint.")),
                ('category', models.CharField(choices=[('D', 'Diet'), ('T', 'Transit'), ('R', 'Recycling'), ('A', 'Airline-Travel'), ('U', 'Utilities')], help_text='The area of sustainability to which this question relates.', max_length=1)),
                ('learn_more_link', models.CharField(blank=True, help_text='Hyperlink where the user can learn more about the question', max_length=1000, null=True)),
                ('learn_image', models.ImageField(blank=True, help_text='Symbolizes what user needs to work on.', null=True, upload_to='images/')),
            ],
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title of the quiz.', max_length=500, null=True, unique=True)),
                ('slug', models.SlugField(blank=True, editable=False, help_text='Unique URL path to access this quiz. Generated by the system.', max_length=500, null=True)),
                ('questions', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), blank=True, help_text='Array of ids for the quiz questions.', null=True, size=5)),
                ('active_question', models.IntegerField(blank=True, default=0, help_text='Id of the question currently being asked.')),
                ('carbon_value_total', models.FloatField(blank=True, default=0, help_text='Total metric tons of carbon that the user can eliminate.')),
            ],
        ),
        migrations.CreateModel(
            name='Mission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title of the mission.', max_length=500, null=True, unique=True)),
                ('action', models.CharField(help_text='Describes what the user needs to do.', max_length=500, null=True)),
                ('clicks_needed', models.IntegerField(default=1, help_text='Number of the links user needs to click.')),
                ('learn_more', models.TextField(blank=True, help_text='Explains why the mission matters.', null=True)),
                ('link_descriptions', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=300, null=True), blank=True, help_text='What websites the user can click to complete the mission.', null=True, size=None)),
                ('link_addresses', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=300, null=True), blank=True, help_text='Links that user can click to complete the mission.', null=True, size=None)),
                ('question', models.ForeignKey(help_text='The question to which this mission relates.', on_delete=django.db.models.deletion.PROTECT, to='carbon_quiz.question')),
            ],
        ),
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('completion_date', models.DateTimeField(auto_now=True, help_text='Date mission was accomplished', null=True)),
                ('secret_id', models.CharField(help_text='Unique id that cannot be guessed easily.', max_length=50, null=True, unique=True)),
                ('zeron_image_url', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=100, null=True), blank=True, choices=[(['assets/glb-files/cartoon_carrot.glb', 'assets/usdz-files/tree.usdz'], "Nature's Model"), (['assets/glb-files/Wheel.glb', 'assets/usdz-files/wheel.usdz'], 'Wheel Model'), (['assets/glb-files/Bin.glb', 'assets/usdz-files/bin.usdz'], 'Bin Model'), (['assets/glb-files/coin.glb', 'assets/usdz-files/coin.usdz'], 'Coin Model'), (['assets/glb-files/Light bulb 1.glb', 'assets/usdz-files/Lightbulb.usdz'], 'Light Bulb Model')], help_text='File paths to the 3D model in storage.', null=True, size=None)),
                ('badge_name', models.CharField(blank=True, help_text='The badge that the user earns in this achievement.', max_length=200, null=True)),
                ('mission', models.ForeignKey(help_text='The mission that earns this achievement.', null=True, on_delete=django.db.models.deletion.PROTECT, to='carbon_quiz.mission')),
                ('profile', models.ForeignKey(help_text='The profile that owns this achievement.', null=True, on_delete=django.db.models.deletion.PROTECT, to='accounts.profile')),
            ],
        ),
    ]
