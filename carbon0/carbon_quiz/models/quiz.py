from django.contrib.postgres.fields import ArrayField
from django.db import models
from django.urls import reverse, reverse_lazy
from django.utils.text import slugify


class Quiz(models.Model):
    '''Represents a collection of 5 questions given to the user.'''
    title = models.CharField(max_length=500,
                             unique=True,
                             help_text="Title of the quiz.",
                             null=True)
    slug = models.SlugField(max_length=500,
                            blank=True, editable=False,
                            null=True,
                            help_text=("Unique URL path to access this quiz. "
                                       + "Generated by the system."))
    questions = ArrayField(
        models.IntegerField(), size=5, 
        help_text="Array of ids for the quiz questions.", null=True, blank=True
    )
    active_question = models.IntegerField(
        help_text="Id of the question currently being asked.", 
        default=0, blank=True
    )
    carbon_value_total = models.FloatField(
        blank=True, default=0, 
        help_text='Total metric tons of carbon that the user can eliminate.'
    )

    def __str__(self):
        '''Returns human-readable name of the Quiz.'''
        return f'{self.title}'

    def get_absolute_url(self):
        """
        Returns a fully qualified path for a Quiz.
        The arg for question_answered on first GET after QuizCreate, is 0
        because we want to make sure it can't refer to a real Question model.
        """
        path_components = {
            'slug': self.slug,
            'is_question_answered': 0  # a question hasn't been answered before 
        }
        print("made a call to absolute url")
        return reverse('carbon_quiz:quiz_detail', kwargs=path_components)

    def increment_active_question(self):
        '''Moves us to the next Question, in the questions array.'''
        self.active_question += 1
        self.save()

    def save(self, *args, **kwargs):
        '''Creates a URL safe slug automatically when a new note is saved.'''
        if not self.pk:
            self.slug = slugify(self.title, allow_unicode=True)

        # call save on the superclass
        return super().save(*args, **kwargs)
