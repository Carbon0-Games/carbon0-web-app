import datetime

from django.contrib.postgres.fields import ArrayField
from django.contrib.auth.models import User
from django.db import models
from django.urls import reverse, reverse_lazy
from django.utils import timezone
from django.utils.text import slugify


class Question(models.Model):
    '''Represents a single question on the Carbon calculator quiz.'''
    question_text = models.CharField(max_length=500,
        help_text="Question for the user"
    )
    question_info = models.TextField(
        help_text="Explains any vocabulary relevant to the question."
    )
    carbon_value = models.FloatField(
        help_text="Tons of carbon that may be present in user's footprint."
    )
    # Define the categories a question can fall into
    CATEGORIES = [
        ('D', 'Diet'),
        ('T', 'Transit'),
        ('R', 'Recycling'),
        ('A', 'Airline-Travel'),
        ('U', 'Utilities'),
    ]
    category = models.CharField(max_length=1, choices=CATEGORIES,
        help_text="The area of sustainability to which this question relates."
    )
    learn_more_link = models.CharField(max_length=1000, help_text=
        "Hyperlink where the user can learn more about the question",
        null=True, blank=True
    )
    learn_image = models.ImageField(upload_to='images/',
                                    null=True, blank=True,
                                    help_text="Symbolizes what user needs to work on.")

    def __str__(self):
        '''Returns the category of the Question, and it's id.'''
        return f'Question {self.category} {self.id}'


class Quiz(models.Model):
    '''Represents a collection of 5 questions given to the user.'''
    title = models.CharField(max_length=500,
                             unique=True,
                             help_text="Title of the quiz.",
                             null=True)
    slug = models.SlugField(max_length=500,
                            blank=True, editable=False,
                            null=True,
                            help_text=("Unique URL path to access this quiz. "
                                       + "Generated by the system."))
    questions = ArrayField(
        models.IntegerField(), size=5, 
        help_text="Array of ids for the quiz questions.", null=True, blank=True
    )
    active_question = models.IntegerField(
        help_text="Id of the question currently being asked.", 
        default=0, blank=True
    )
    carbon_value_total = models.FloatField(
        blank=True, default=0, 
        help_text='Total metric tons of carbon that the user can eliminate.'
    )

    def __str__(self):
        '''Returns human-readable name of the Quiz.'''
        return f'{self.title}'

    def get_absolute_url(self):
        """
        Returns a fully qualified path for a Quiz.
        The arg for question_answered on first GET after QuizCreate, is 0
        because we want to make sure it can't refer to a real Question model.
        """
        path_components = {
            'slug': self.slug,
            'is_question_answered': 0  # a question hasn't been answered before 
        }
        print("made a call to absolute url")
        return reverse('carbon_quiz:quiz_detail', kwargs=path_components)

    def increment_active_question(self):
        '''Moves us to the next Question, in the questions array.'''
        self.active_question += 1
        self.save()

    def save(self, *args, **kwargs):
        '''Creates a URL safe slug automatically when a new note is saved.'''
        if not self.pk:
            self.slug = slugify(self.title, allow_unicode=True)

        # call save on the superclass
        return super().save(*args, **kwargs)

    

class Mission(models.Model):
    '''Represents a possible action the user takes to help the environment.'''
    title = models.CharField(max_length=500,
                             unique=True,
                             help_text="Title of the mission.",
                             null=True)
    action = models.CharField(
        max_length=500, null=True,
        help_text='Describes what the user needs to do.'
    )
    clicks_needed = models.IntegerField(
        default=1, help_text='Number of the links user needs to click.'
    )
    learn_more = models.TextField(
        help_text="Explains why the mission matters.",
        null=True, blank=True
    )
    links = ArrayField(
        models.CharField(max_length=500), size=3,
        help_text="Links that the user can click to complete the mission.",
        null=True, blank=True
    )
    question = models.ForeignKey(
        Question, on_delete=models.PROTECT,
        help_text="The question to which this mission relates.",
    )

    def __str__(self):
        '''Returns human-readable name of the Mission.'''
        return f'{self.title}'


class Achievement(models.Model):
    '''Represents what the user attains for completing a mission.'''
    mission = models.ForeignKey(
        Mission, on_delete=models.PROTECT,
        help_text='The mission that earns this achievement.',
        null=True
    )
    user = models.ForeignKey(
        User, on_delete=models.PROTECT, null=True,
        help_text='The user who completed the mission.'
    )
    completion_date = models.DateTimeField(
        help_text="Date mission was accomplished",
        null=True, blank=True, auto_now=True                          
    )
    # Define the types of Zerons an Achievement can have
    ZERONS = [
        # the tuples below follow the format: `(img_url_path, name_of_zeron)`
        ('assets/cartoon_carrot.gltf', 'Carrot Model'),  # goes with Diet
        ('assets/Wheel.gltf', 'Wheel Model'),  # goes with Transit 
        ('assets/Bin.gltf', 'Bin Model'),  # goes with Recycling 
        ('assets/coin.gltf', 'Coin Model'),  # goes with Airline-Travel 
        ('assets/Light bulb 1.gltf', 'Light Bulb Model'),  # # goes with Utilities
    ]
    zeron_image_url = models.CharField(
        choices=ZERONS,
        max_length=100, null=True, 
        blank=True, help_text='Path to the 3D model in storage.'
    )
    badge_name = models.CharField(
        max_length=200, null=True, blank=True,
        help_text='The badge that the user earns in this achievement.'
    )

    def __str__(self):
        '''Returns a human-readable name for the Achievement.'''
        mission = Mission.objects.get(id=self.mission.id)
        return f"Achievement for Mission: '{mission.title}'"

    def get_absolute_url(self):
        '''Returns a fully qualified path for a Achievement.'''
        path_components = {'pk': self.pk,}
        return reverse('carbon_quiz:achievement_detail', kwargs=path_components)

    def zeron_say_hello(self):
        '''Returns a greeting the Zeron says to the User.'''
        # find the name of the zeron this model has
        greeting = ''
        for img_url, zeron_name in Achievement.ZERONS:
            if self.zeron_image_url == img_url:
                # set the greeting
                greeting = (
                    f"I'm {zeron_name}. " +
                     "Thanks for helping to save the planet!"
                )
        # return the greeting
        return greeting

    @classmethod
    def set_zeron_image_url(cls, mission):
        """
        Returns the appropiate Zeron, given a Mission model instance.

        Parameters:
        mission(Mission): the Mission model that has been completed

        Returns:
        Tuple(str, str): the value in Achievement.ZERONS that 
                         corresponds to the category this Mission 
                         falls under (must refer back to related Question)

        """
        # get the category of the question related to the mission
        category = mission.question.category
        # store a list of the categories Questions may be in
        category_abbreviations = [
            category_abbrev for category_abbrev, category in Question.CATEGORIES
        ]
        # map each category to a Zeron name 
        category_to_zerons = dict(
            zip(category_abbreviations, Achievement.ZERONS)
        )
        # find the right choice of zeron, given the category
        zeron_img_path, zeron_model_name = category_to_zerons[category]
        return zeron_img_path
         